generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Office {
  id         String      @id @default(cuid())
  title      String
  type       OfficeType
  regionId   String
  position   Int?
  jobTitle   String
  description String?
  candidates Candidate[]
  region     Region      @relation(fields: [regionId], references: [id])
  races      Race[]

  titleWiki        String?
  jobTitleWiki     String?
  descriptionWiki  String?

  @@unique([regionId, title])
}

model Region {
  id      String   @id @default(cuid())
  name    String   @unique
  code    String?
  guides  Guide[]
  offices Office[]
  questionnaires Questionnaire[]
}

model Candidate {
  id            String          @id @default(cuid())
  name          String
  stateId       String?
  electionYear  Int
  officeId      String
  incumbent     Boolean         @default(false)
  yearsInOffice Int?
  image         String?
  bio           String?
  party         String?
  email         String?
  statement     String?
  website       String?
  facebook      String?
  twitter       String?
  instagram     String?
  youtube       String?
  pdc           String?
  donors        String?
  lettersYes    String?
  lettersNo     String?
  articles      String?
  engagement    String?
  hide          Boolean         @default(false)
  minifiler     Boolean         @default(false)

  // Wiki override fields
  nameWiki      String?
  bioWiki       String?
  statementWiki String?
  imageWiki     String?
  websiteWiki   String?
  emailWiki     String?
  phoneWiki     String?
  twitterWiki   String?
  facebookWiki  String?
  instagramWiki String?
  engagementWiki String?
  articlesWiki   String?

  office           Office             @relation(fields: [officeId], references: [id])
  races            CandidateRace[]
  contributions    Contribution[]
  endorsements     Endorsement[]
  enforcementCases EnforcementCase[]
  user             User?
  engagements      CandidateEngagement[]
  questionnaireResponses QuestionnaireResponse[]
}

model CandidateRace {
  candidateId String
  raceId      String
  incumbent   Boolean   @default(false)
  party       String?
  elected     Boolean?
  voteCount   Int?
  votePercent Float?
  termLength  Int?
  shortTerm   Boolean   @default(false)
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  race        Race      @relation(fields: [raceId], references: [id])

  @@id([candidateId, raceId])
}

model Race {
  id           String          @id @default(cuid())
  electionYear Int
  officeId     String
  type         ElectionType
  intro        String?
  body         String?
  announcements String?
  hide         Boolean         @default(false)
  candidates   CandidateRace[]
  office       Office          @relation(fields: [officeId], references: [id])
  Guide        Guide[]         @relation("GuideRaces")
  engagements  Engagement[]

  introWiki         String?
  bodyWiki          String?
  announcementsWiki String?
}

model Guide {
  id           String       @id @default(cuid())
  electionYear Int
  regionId     String
  type         ElectionType
  announcements String?
  region       Region       @relation(fields: [regionId], references: [id])
  Race         Race[]       @relation("GuideRaces")

  announcementsWiki String?
}

model Endorsement {
  id          String          @id @default(cuid())
  candidateId String
  endorser    String
  url         String?
  filePath    String?
  sourceTitle String?
  notes       String?
  type        EndorsementType
  forAgainst  ForAgainst
  candidate   Candidate       @relation(fields: [candidateId], references: [id])
  createdAt   DateTime        @default(now())
}

model Contribution {
  id              String    @id @default(cuid())
  candidateId     String
  electionYear    Int
  donorName       String
  donorCity       String?
  donorState      String?
  donorZip        String?
  donorEmployer   String?
  donorOccupation String?
  amount          Float
  date            DateTime
  description     String?
  cashOrInKind    String?
  candidate       Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([electionYear])
}

model Engagement {
  id                 String                  @id @default(cuid())
  slug               String                  @unique
  title              String
  date               DateTime?
  linkType           EngagementLinkType      @default(SHARED)
  primaryLink        String?
  secondaryLink      String?
  secondaryLinkTitle String?
  notes              String?
  raceId             String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  race               Race?                   @relation(fields: [raceId], references: [id])
  participants       CandidateEngagement[]

  @@index([raceId])
  @@index([date])
}

model CandidateEngagement {
  engagementId String
  candidateId  String
  participated Boolean                 @default(false)
  notes        String?
  link         String?                 // Optional per-candidate link (overrides engagement.primaryLink)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  engagement   Engagement              @relation(fields: [engagementId], references: [id])
  candidate    Candidate               @relation(fields: [candidateId], references: [id])

  @@id([engagementId, candidateId])
  @@index([candidateId])
}

model Questionnaire {
  id          String                 @id @default(cuid())
  slug        String                 @unique
  year        Int
  title       String
  regionId    String?

  region      Region?                @relation(fields: [regionId], references: [id])
  questions   QuestionnaireQuestion[]
  responses   QuestionnaireResponse[]

  @@index([year])
  @@index([regionId])
}

model QuestionnaireQuestion {
  id              String        @id @default(cuid())
  questionnaireId String
  position        Int
  type            String
  question        String?
  statementA      String?
  statementB      String?

  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  responses       QuestionnaireResponse[]

  @@unique([questionnaireId, position], name: "questionnaireId_position")
  @@index([questionnaireId])
}

model QuestionnaireResponse {
  id              String                @id @default(cuid())
  questionnaireId String
  questionId      String
  candidateId     String
  value           Int?
  comment         String?
  textResponse    String?

  questionnaire   Questionnaire         @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  question        QuestionnaireQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  candidate       Candidate             @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([questionId, candidateId])
  @@index([questionnaireId])
  @@index([questionId])
  @@index([candidateId])
}

model EnforcementCase {
  id               String    @id @default(cuid())
  caseNumber       String    @unique
  opened           DateTime
  complainant      String
  respondent       String
  subject          String
  areasOfLaw       String
  status           String
  description      String    @db.Text
  url              String

  // Candidate linking
  candidateId      String?
  candidate        Candidate? @relation(fields: [candidateId], references: [id])
  matchConfidence  Float?
  manuallyReviewed Boolean   @default(false)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([candidateId])
  @@index([status])
}

enum OfficeType {
  CITY_COUNCIL
  SCHOOL_BOARD
  PORT_COMMISSIONER
  BALLOT_MEASURE
  COUNTY_COMMISSIONER
  STATE_SENATOR
  STATE_REPRESENTATIVE
  SUPERIOR_COURT_JUDGE
  US_HOUSE
  US_SENATE
  MAYOR
  SHERIFF
  PROSECUTOR
}

enum EndorsementType {
  LETTER
  SOCIAL
  ORG
}

enum ForAgainst {
  FOR
  AGAINST
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
}

enum EngagementLinkType {
  SHARED        // One link for all candidates (e.g., questionnaire)
  PER_CANDIDATE // Individual link per candidate (e.g., video timestamp)
}

// Wiki System Models

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  role            UserRole  @default(COMMUNITY)
  candidateId     String?   @unique
  candidate       Candidate? @relation(fields: [candidateId], references: [id])
  publicId        String?   @unique

  // Trust scoring
  editsAccepted   Int       @default(0)
  editsRejected   Int       @default(0)
  editsPending    Int       @default(0)

  edits           Edit[]
  moderatedEdits  Edit[]    @relation("ModeratedEdits")
  loginTokens     LoginToken[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum UserRole {
  COMMUNITY
  CANDIDATE
  MODERATOR
  ADMIN
}

model LoginToken {
  id          String   @id @default(cuid())
  token       String   @unique @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  used        Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Edit {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])

  // What's being edited
  entityType    EntityType
  entityId      String
  field         String

  // The change
  oldValue      Json?
  newValue      Json
  rationale     String

  // Review process
  status        EditStatus  @default(PENDING)
  moderatorId   String?
  moderator     User?       @relation("ModeratedEdits", fields: [moderatorId], references: [id])
  moderatorNote String?

  // Metadata
  createdAt     DateTime    @default(now())
  reviewedAt    DateTime?
  appliedAt     DateTime?

  @@index([status, createdAt])
  @@index([userId, status])
  @@index([entityType, entityId])
}

enum EntityType {
  CANDIDATE
  RACE
  OFFICE
  GUIDE
  ENDORSEMENT
  CONTRIBUTION
}

enum EditStatus {
  PENDING
  APPROVED
  REJECTED
  APPLIED
  SUPERSEDED
}
