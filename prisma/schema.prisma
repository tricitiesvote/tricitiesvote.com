generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Office {
  id         String      @id @default(cuid())
  title      String
  type       OfficeType
  regionId   String
  position   Int?
  jobTitle   String
  candidates Candidate[]
  region     Region      @relation(fields: [regionId], references: [id])
  races      Race[]

  @@unique([regionId, title])
}

model Region {
  id      String   @id @default(cuid())
  name    String   @unique
  code    String?
  guides  Guide[]
  offices Office[]
}

model Candidate {
  id            String          @id @default(cuid())
  name          String
  stateId       String?
  electionYear  Int
  officeId      String
  incumbent     Boolean         @default(false)
  yearsInOffice Int?
  image         String?
  bio           String?
  party         String?
  email         String?
  statement     String?
  website       String?
  facebook      String?
  twitter       String?
  instagram     String?
  youtube       String?
  pdc           String?
  donors        String?
  lettersYes    String?
  lettersNo     String?
  articles      String?
  engagement    String?
  hide          Boolean         @default(false)
  minifiler     Boolean         @default(false)
  office        Office          @relation(fields: [officeId], references: [id])
  races         CandidateRace[]
  contributions Contribution[]
  endorsements  Endorsement[]
}

model CandidateRace {
  candidateId String
  raceId      String
  incumbent   Boolean   @default(false)
  party       String?
  elected     Boolean?
  voteCount   Int?
  votePercent Float?
  termLength  Int?
  shortTerm   Boolean   @default(false)
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  race        Race      @relation(fields: [raceId], references: [id])

  @@id([candidateId, raceId])
}

model Race {
  id           String          @id @default(cuid())
  electionYear Int
  officeId     String
  type         ElectionType
  intro        String?
  body         String?
  hide         Boolean         @default(false)
  candidates   CandidateRace[]
  office       Office          @relation(fields: [officeId], references: [id])
  Guide        Guide[]         @relation("GuideRaces")
}

model Guide {
  id           String       @id @default(cuid())
  electionYear Int
  regionId     String
  type         ElectionType
  region       Region       @relation(fields: [regionId], references: [id])
  Race         Race[]       @relation("GuideRaces")
}

model Endorsement {
  id          String          @id @default(cuid())
  candidateId String
  endorser    String
  url         String
  type        EndorsementType
  forAgainst  ForAgainst
  candidate   Candidate       @relation(fields: [candidateId], references: [id])
}

model Contribution {
  id              String    @id @default(cuid())
  candidateId     String
  electionYear    Int
  donorName       String
  donorCity       String?
  donorState      String?
  donorZip        String?
  donorEmployer   String?
  donorOccupation String?
  amount          Float
  date            DateTime
  description     String?
  cashOrInKind    String?
  candidate       Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([electionYear])
}

enum OfficeType {
  CITY_COUNCIL
  SCHOOL_BOARD
  PORT_COMMISSIONER
  COUNTY_COMMISSIONER
  STATE_SENATOR
  STATE_REPRESENTATIVE
  SUPERIOR_COURT_JUDGE
  US_HOUSE
  US_SENATE
  MAYOR
  SHERIFF
  PROSECUTOR
}

enum EndorsementType {
  LETTER
  SOCIAL
  ORG
}

enum ForAgainst {
  FOR
  AGAINST
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
}
