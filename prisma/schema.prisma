// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Using your existing office values from the config
enum OfficeType {
  CITY_COUNCIL          @map("City Council")
  SCHOOL_BOARD          @map("School Board")
  PORT_COMMISSIONER     @map("Port Commissioner")
  COUNTY_COMMISSIONER   @map("County Commissioner")
  STATE_SENATOR         @map("WA Legislator (Senate)")
  STATE_REPRESENTATIVE  @map("WA Legislator (House)")
  SUPERIOR_COURT_JUDGE  @map("Superior Court Judge")
  US_HOUSE             @map("U.S. House")
  US_SENATE            @map("U.S. Senate")
  MAYOR                @map("Mayor")
  SHERIFF              @map("Sheriff")
  PROSECUTOR           @map("Prosecutor")
}

model Office {
  id          String      @id @default(cuid())
  title       String      // e.g. "Richland City Council Pos 4"
  type        OfficeType
  region      Region      @relation(fields: [regionId], references: [id])
  regionId    String
  position    Int?        // Optional position number
  races       Race[]
  jobTitle    String      // e.g. "Council member", "Commissioner"
  candidates  Candidate[]
  
  @@unique([regionId, title])
}

model Region {
  id          String    @id @default(cuid())
  name        String    // e.g. "Richland", "Benton County"
  code        String?   // e.g. "RCH", "BC"
  offices     Office[]
  guides      Guide[]   // Was previously called guides in your data structure

  @@unique([name])
}

model Candidate {
  id            String          @id @default(cuid())
  name          String
  stateId       String?        // PDC filer_id
  electionYear  Int
  office        Office         @relation(fields: [officeId], references: [id])
  officeId      String
  incumbent     Boolean        @default(false)
  yearsInOffice Int?
  image         String?
  bio           String?        @db.Text
  party         String?
  email         String?
  statement     String?        @db.Text
  website       String?
  facebook      String?
  twitter       String?
  instagram     String?
  youtube       String?
  pdc          String?        // Campaign finance URL
  donors        String?        @db.Text
  lettersYes    String?        @db.Text
  lettersNo     String?        @db.Text
  articles      String?        @db.Text
  engagement    String?        @db.Text
  hide          Boolean        @default(false)
  minifiler     Boolean        @default(false)
  races         CandidateRace[]
  endorsements  Endorsement[]
}

model CandidateRace {
  candidate     Candidate     @relation(fields: [candidateId], references: [id])
  candidateId   String
  race          Race         @relation(fields: [raceId], references: [id])
  raceId        String
  incumbent     Boolean      @default(false)
  party         String?      // Optional since some races are non-partisan
  elected       Boolean?     // null until results final
  voteCount     Int?
  votePercent   Float?
  termLength    Int?         // For tracking 2 vs 4 year terms
  shortTerm     Boolean      @default(false)
  
  @@id([candidateId, raceId])
}

model Race {
  id          String          @id @default(cuid())
  electionYear Int
  office      Office          @relation(fields: [officeId], references: [id])
  officeId    String
  type        ElectionType
  candidates  CandidateRace[]
  intro       String?         @db.Text
  body        String?         @db.Text
  hide        Boolean         @default(false)
  guides      Guide[]         @relation("GuideRaces")
}

model Guide {
  id           String    @id @default(cuid())
  electionYear Int
  region       Region    @relation(fields: [regionId], references: [id])
  regionId     String
  type         ElectionType
  races        Race[]    @relation("GuideRaces")
}

model Endorsement {
  id          String    @id @default(cuid())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  endorser    String
  url         String
  type        EndorsementType
  forAgainst  ForAgainst
}

enum EndorsementType {
  LETTER
  SOCIAL
  ORG
}

enum ForAgainst {
  FOR
  AGAINST
}

enum ElectionType {
  PRIMARY
  GENERAL
  SPECIAL
}